<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="serial__send_8c" kind="file" language="C++">
    <compoundname>serial_send.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">driver/uart.h</includes>
    <includes refid="serial__send_8h" local="yes">serial_send.h</includes>
    <includes refid="setup_8h" local="yes">setup.h</includes>
    <incdepgraph>
      <node id="5">
        <label>serial_send.h</label>
        <link refid="serial__send_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>setup.h</label>
        <link refid="setup_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c</label>
        <link refid="serial__send_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>driver/uart.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t uart_mutex</definition>
        <argsstring></argsstring>
        <name>uart_mutex</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="7" column="26" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="7" bodyend="-1"/>
        <referencedby refid="serial__send_8h_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</referencedby>
        <referencedby refid="serial__send_8h_1aa0463ce777016c795ce8597f2e04bf79" compoundref="serial__send_8c" startline="9" endline="14">uart_send_init</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="serial__send_8c_1aa0463ce777016c795ce8597f2e04bf79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_send_init</definition>
        <argsstring>(void)</argsstring>
        <name>uart_send_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Add mutex initialization for UART communication. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a mutex to ensure thread-safe access to the UART communication. This function does not return any value. <simplesect kind="note"><para>This function should be called after initializing the UART and before any UART communication. </para>
</simplesect>
<simplesect kind="author"><para>Ernesto Estrada </para>
</simplesect>
<simplesect kind="date"><para>June 10, 2025 </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="9" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="9" bodyend="14"/>
        <references refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" compoundref="serial__send_8c" startline="7">uart_mutex</references>
        <referencedby refid="system_8h_1a43f5e0d6db0fb41a437cc9096b32e9b5" compoundref="system_8c" startline="30" endline="54">system_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_send_command</definition>
        <argsstring>(const char *cmd)</argsstring>
        <name>uart_send_command</name>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Sends the termination command to the Nextion display. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sends the termination command xFF xFF xFF to the Nextion display to indicate the end of a command. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>June 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="16" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="16" bodyend="26"/>
        <references refid="setup_8h_1a3c64efae8dadfdf4bad585cad0f02ccf" compoundref="setup_8h" startline="10">END_COMMAND</references>
        <references refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" compoundref="serial__send_8c" startline="7">uart_mutex</references>
        <references refid="setup_8h_1ab74ec82c9f5211b716c017e6f4b26c4d" compoundref="setup_8h" startline="5">UART_PORT_NUM</references>
        <referencedby refid="serial__send_8h_1a08ad982ff9f8d3883d855ed931d9b6f6" compoundref="serial__send_8c" startline="34" endline="38">send_float_to_display</referencedby>
        <referencedby refid="serial__send_8h_1a5054d67ac4b50fb8e90972bd55049e3f" compoundref="serial__send_8c" startline="52" endline="56">send_global_object</referencedby>
        <referencedby refid="serial__send_8h_1a79b60688c065ea5ed16bfc43a0b82c9b" compoundref="serial__send_8c" startline="28" endline="32">send_int_to_display</referencedby>
        <referencedby refid="serial__send_8h_1ab370b65d42bfe89671d6895bd06849a0" compoundref="serial__send_8c" startline="46" endline="50">send_method_to_display</referencedby>
        <referencedby refid="serial__send_8h_1aa46fe2f4b02e9852f9f7a06c4ebd08a3" compoundref="serial__send_8c" startline="40" endline="44">send_text_to_display</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1a79b60688c065ea5ed16bfc43a0b82c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_int_to_display</definition>
        <argsstring>(const char *object, const char *attribute, int value)</argsstring>
        <name>send_int_to_display</name>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sends a command to update an integer attribute of an object on the Nextion display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the page name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the object name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the attribute name to be updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value to set the attribute to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function constructs a command string to update an integer attribute of a specified object on the Nextion display. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>June 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="28" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="28" bodyend="32"/>
        <references refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</references>
        <referencedby refid="system_8h_1a97ec9415a474734bbfe4819763f72c3f" compoundref="system_8c" startline="190" endline="208">update_header</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1a08ad982ff9f8d3883d855ed931d9b6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_float_to_display</definition>
        <argsstring>(const char *page, const char *object, const char *attribute, float value, int precision)</argsstring>
        <name>send_float_to_display</name>
        <param>
          <type>const char *</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Sends a command to update a float attribute of an object on the Nextion display with precision. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the page name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the object name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the attribute name to be updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Float value to set the attribute to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer vaLue indicating the number of decimal places to format the float value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function constructs a command string to update a float attribute of a specified object on the Nextion display, with a specified number of decimal places. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>June 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="34" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="34" bodyend="38"/>
        <references refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</references>
        <referencedby refid="utils_8h_1a4bc9bfc0677667a966d7ab73efafa4d1" compoundref="utils_8c" startline="8" endline="47">print_sensor_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1aa46fe2f4b02e9852f9f7a06c4ebd08a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_text_to_display</definition>
        <argsstring>(const char *page, const char *object, const char *attribute, const char *text)</argsstring>
        <name>send_text_to_display</name>
        <param>
          <type>const char *</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Sends a command to update a text attribute of an object on the Nextion display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the page name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the object name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the attribute name to be updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer conatining the text string to be set as the attribute value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function constructs a command string to update a text attribute of a specified object on the Nextion display. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>June 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="40" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="40" bodyend="44"/>
        <references refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</references>
        <referencedby refid="time__manager_8h_1ac1f62fd134f587b2f14e3fe565f84e11" compoundref="time__manager_8c" startline="82" endline="92">print_operation_time</referencedby>
        <referencedby refid="utils_8h_1a4bc9bfc0677667a966d7ab73efafa4d1" compoundref="utils_8c" startline="8" endline="47">print_sensor_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1ab370b65d42bfe89671d6895bd06849a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_method_to_display</definition>
        <argsstring>(const char *page, const char *object, const char *method)</argsstring>
        <name>send_method_to_display</name>
        <param>
          <type>const char *</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Sends a method call to an object on the Nextion display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the page name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containing the object namne. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Const char pointer containig the method name to be called.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function constructs a command string to call a method on a specified object on the Nextion display. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>june 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="46" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="46" bodyend="50"/>
        <references refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</references>
        <referencedby refid="system_8h_1add779b9d830853ab883651b998ad43d8" compoundref="system_8c" startline="81" endline="123">store_system_event</referencedby>
      </memberdef>
      <memberdef kind="function" id="serial__send_8c_1a5054d67ac4b50fb8e90972bd55049e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_global_object</definition>
        <argsstring>(const char *object, const char *attribute, const char *value)</argsstring>
        <name>send_global_object</name>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sends a command to update a global object attribute on the Nextion display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>const char pointer containing the global object name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>const char pointer containing the attribute name to be updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>const char pointer containing the value to be set as the attribute value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function constructs a command string to update a global object attribute on the Nextion display. This function does not return any value. <simplesect kind="author"><para>Ernesto Estrada. </para>
</simplesect>
<simplesect kind="date"><para>June 9, 2025. </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" line="52" column="6" bodyfile="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c" bodystart="52" bodyend="56"/>
        <references refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" compoundref="serial__send_8c" startline="16" endline="26">uart_send_command</references>
        <referencedby refid="tasks_8h_1a5dc1efd0c548644645cf4607e8e01ae0" compoundref="tasks_8c" startline="128" endline="152">ethernet_monitor_task</referencedby>
        <referencedby refid="tasks_8h_1af6775fd71f463f5b4bd0281831adf189" compoundref="tasks_8c" startline="27" endline="34">update_date_task</referencedby>
        <referencedby refid="system_8h_1a97ec9415a474734bbfe4819763f72c3f" compoundref="system_8c" startline="190" endline="208">update_header</referencedby>
        <referencedby refid="tasks_8h_1adfc61f610137566e1a44bca38c2fb368" compoundref="tasks_8c" startline="36" endline="43">update_time_task</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/uart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="serial__send_8h" kindref="compound">serial_send.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="setup_8h" kindref="compound">setup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/><ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref><sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Mutx<sp/>to<sp/>protect<sp/>UART<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="serial__send_8h_1aa0463ce777016c795ce8597f2e04bf79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1aa0463ce777016c795ce8597f2e04bf79" kindref="member">uart_send_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref><sp/>=<sp/>xSemaphoreCreateMutex();<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>mutex<sp/>for<sp/>UART<sp/>access<sp/>to<sp/>ensure<sp/>thread<sp/>safety.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref><sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>mutex<sp/>was<sp/>created<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="serial__send_8h_1a396d4a4f67f557de2870d2c47d9a7103" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cmd)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref><sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>mutex<sp/>is<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xSemaphoreTake(<ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref>,<sp/>pdMS_TO_TICKS(100))<sp/>==<sp/>pdTRUE)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>take<sp/>the<sp/>mutex<sp/>with<sp/>a<sp/>timeout<sp/>of<sp/>100<sp/>ms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_write_bytes(<ref refid="setup_8h_1ab74ec82c9f5211b716c017e6f4b26c4d" kindref="member">UART_PORT_NUM</ref>,<sp/>cmd,<sp/>strlen(cmd));<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>UART<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_write_bytes(<ref refid="setup_8h_1ab74ec82c9f5211b716c017e6f4b26c4d" kindref="member">UART_PORT_NUM</ref>,<sp/><ref refid="setup_8h_1a3c64efae8dadfdf4bad585cad0f02ccf" kindref="member">END_COMMAND</ref>,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>end<sp/>command<sp/>to<sp/>indicate<sp/>the<sp/>end<sp/>of<sp/>the<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(<ref refid="serial__send_8c_1a8eca84d3e2c7c0adf364819e74b1bd9b" kindref="member">uart_mutex</ref>);<sp/></highlight><highlight class="comment">//<sp/>Release<sp/>the<sp/>mutex<sp/>after<sp/>sending<sp/>the<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;UART<sp/>mutex<sp/>timeout.<sp/>Could<sp/>not<sp/>send:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>cmd);<sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>could<sp/>not<sp/>be<sp/>taken,<sp/>print<sp/>a<sp/>timeout<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="serial__send_8h_1a79b60688c065ea5ed16bfc43a0b82c9b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1a79b60688c065ea5ed16bfc43a0b82c9b" kindref="member">send_int_to_display</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attribute,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[100];<sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>hold<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(cmd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmd),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s=%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>attribute,<sp/>value);<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(cmd);<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>command<sp/>the<sp/>Nextion<sp/>diaplay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="serial__send_8h_1a08ad982ff9f8d3883d855ed931d9b6f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1a08ad982ff9f8d3883d855ed931d9b6f6" kindref="member">send_float_to_display</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>page,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attribute,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[100];<sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>to<sp/>hold<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(cmd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmd),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s.%s=%.*f&quot;</highlight><highlight class="normal">,<sp/>page,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>attribute,<sp/>precision,<sp/>value);<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>command<sp/>string<sp/>with<sp/>specified<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(cmd);<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>Nextion<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="serial__send_8h_1aa46fe2f4b02e9852f9f7a06c4ebd08a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1aa46fe2f4b02e9852f9f7a06c4ebd08a3" kindref="member">send_text_to_display</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*page,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*attribute,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[256];<sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>hold<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(cmd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmd),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s.%s=\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,<sp/>page,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>attribute,<sp/>text);<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>command<sp/>string<sp/>to<sp/>set<sp/>the<sp/>text<sp/>attribute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(cmd);<sp/></highlight><highlight class="comment">//<sp/>Text<sp/>command<sp/>must<sp/>be<sp/>in<sp/>UTF-8<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="serial__send_8h_1ab370b65d42bfe89671d6895bd06849a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1ab370b65d42bfe89671d6895bd06849a0" kindref="member">send_method_to_display</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*page,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*method)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[128];<sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>hold<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(cmd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmd),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s.%s&quot;</highlight><highlight class="normal">,<sp/>page,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>method);<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>command<sp/>string<sp/>to<sp/>call<sp/>the<sp/>method<sp/>on<sp/>the<sp/>specified<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(cmd);<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>Nextion<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="serial__send_8h_1a5054d67ac4b50fb8e90972bd55049e3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="serial__send_8c_1a5054d67ac4b50fb8e90972bd55049e3f" kindref="member">send_global_object</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attribute,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[100];<sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>hold<sp/>the<sp/>command<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(cmd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmd),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s=\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>attribute,<sp/>value);<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>command<sp/>string<sp/>to<sp/>set<sp/>a<sp/>global<sp/>object&apos;s<sp/>attribute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="serial__send_8c_1a396d4a4f67f557de2870d2c47d9a7103" kindref="member">uart_send_command</ref>(cmd);<sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>Nextion<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Hammurabi.Sierra/Documents/GIT/AERtronic_Lite_2.0/ESP-IDF/Aertronic_Lite/main/serial_send.c"/>
  </compounddef>
</doxygen>
